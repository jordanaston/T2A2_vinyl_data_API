from flask import Blueprint, jsonify, request, abort
from main import db
from models.artists import Artist
from schemas.artist_schema import artist_schema, artists_schema
from flask_jwt_extended import jwt_required, get_jwt_identity

artists = Blueprint('artists', __name__, url_prefix="/artists")

# The GET routes endpoint
@artists.route("/", methods=["GET"])
def get_artists():
    # get all the users from the database table
    artist_list = Artist.query.all()
    # Convert the cards from the database into a JSON format and store them in result
    result = artists_schema.dump(artist_list)
    # return the data in JSON format
    return jsonify(result)

# The GET routes endpoint for a single record
@artists.route("/<int:id>/", methods=["GET"])
def get_artist(id):
    artist = Artist.query.filter_by(id=id).first()
    #return an error if the card doesn't exist
    if not artist:
        return abort(400, description= "Artist does not exist")
    # Convert the cards from the database into a JSON format and store them in result
    result = artist_schema.dump(artist)
    # return the data in JSON format
    return jsonify(result)

# The POST route endpoint
@artists.route("/", methods=["POST"])
def create_artist():
    # Create a new artist
    artist_fields = artist_schema.load(request.json)

    new_artist = Artist()
    new_artist.artist_name = artist_fields["artist_name"]
    new_artist.record_id = artist_fields["record_id"]

    # not taken from the request, generated by the server
    # new_card.date = date.today()

    # add to the database and commit
    db.session.add(new_artist)
    db.session.commit()
    # return the card in the response
    return jsonify(artist_schema.dump(new_artist))


# Finally, we round out our CRUD resource with a DELETE method
@artists.route("/<int:id>/", methods=["DELETE"])
def delete_artist(id):
    # #get the user id invoking get_jwt_identity
    # user_id = get_jwt_identity()
    # #Find it in the db
    # user = User.query.get(user_id)
    # #Make sure it is in the database
    # if not user:
    #     return abort(401, description="Invalid user")
    # # Stop the request if the user is not an admin
    # if not user.admin:
    #     return abort(401, description="Unauthorised user")
    # # find the card
    artist = Artist.query.filter_by(id=id).first()
    # return an error if the card doesn't exist
    if not Artist:
        return abort(400, description= "Artist doesn't exist")
    # Delete the card from the database and commit
    db.session.delete(artist)
    db.session.commit()
    # return the card in the response
    return jsonify(artist_schema.dump(artist))
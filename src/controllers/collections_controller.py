from flask import Blueprint, jsonify, request, abort
from main import db
from models.collections import Collection
from schemas.collection_schema import collection_schema, collections_schema
from flask_jwt_extended import jwt_required, get_jwt_identity

collections = Blueprint('collections', __name__, url_prefix="/collections")

# The GET routes endpoint to get all collections
@collections.route("/", methods=["GET"])
def get_collections():
    # get all the users from the database table
    collection_list = Collection.query.all()
    # Convert the cards from the database into a JSON format and store them in result
    result = collections_schema.dump(collection_list)
    # return the data in JSON format
    return jsonify(result)

# The GET routes endpoint for a single collection
@collections.route("/<int:id>/", methods=["GET"])
def get_collection(id):
    collection = Collection.query.filter_by(id=id).first()
    #return an error if the card doesn't exist
    if not collection:
        return abort(400, description= "Collection does not exist")
    # Convert the cards from the database into a JSON format and store them in result
    result = collection_schema.dump(collection)
    # return the data in JSON format
    return jsonify(result)


# The POST route endpoint
@collections.route("/", methods=["POST"])
def create_collection():
    # #Create a new card
    collection_fields = collection_schema.load(request.json)

    new_collection = Collection()
    new_collection.user_id = collection_fields["user_id"]
    new_collection.user_id = collection_fields["user_id"]
    
    # not taken from the request, generated by the server
    # new_card.date = date.today()

    # add to the database and commit
    db.session.add(new_collection)
    db.session.commit()
    #return the card in the response
    return jsonify(collection_schema.dump(new_collection))


# Finally, we round out our CRUD resource with a DELETE method
@collections.route("/<int:id>/", methods=["DELETE"])
def delete_collection(id):
    # get the user id invoking get_jwt_identity
    # user_id = get_jwt_identity()
    # #Find it in the db
    # user = User.query.get(user_id)
    # #Make sure it is in the database
    # if not user:
    #     return abort(401, description="Invalid user")
    # # Stop the request if the user is not an admin
    # if not user.admin:
    #     return abort(401, description="Unauthorised user")
    # # find the card
    collection = Collection.query.filter_by(id=id).first()
    # return an error if the card doesn't exist
    if not Collection:
        return abort(400, description= "Collection doesn't exist")
    # Delete the card from the database and commit
    db.session.delete(collection)
    db.session.commit()
    # return the card in the response
    return jsonify(collection_schema.dump(collection))